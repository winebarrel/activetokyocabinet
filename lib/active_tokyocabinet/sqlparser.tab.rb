#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'strscan'

module ActiveTokyoCabinet

class SQLParser < Racc::Parser

module_eval(<<'...end sqlparser.y/module_eval...', 'sqlparser.y', 199)

def initialize(obj)
  src = obj.is_a?(IO) ? obj.read : obj.to_s
  @ss = StringScanner.new(src)
end

def scan
  piece = nil

  until @ss.eos?
    if (tok = @ss.scan /\s+/)
      # nothing to do
    elsif (tok = @ss.scan /(?:BW|EW|INCALL|INCANY|INC|IN|EQANY|REGEXP|BT|BETWEEN|FTS|FTSALL|FTSANY|FTSEX)\b/i)
      yield tok.upcase.to_sym, tok
    elsif (tok = @ss.scan /(?:>=|<=|>|<|=)/)
      yield tok, tok
    elsif (tok = @ss.scan /(?:INSERT|INTO|VALUES|SELECT|FROM|WHERE|AND|UPDATE|SET|DELETE|COUNT|ORDER|BY|LIMIT|OFFSET|AS)\b/i)
      yield tok.upcase.to_sym, tok
    elsif (tok = @ss.scan /(?:ASC|DESC|STRASC|STRDESC|NUMASC|NUMDESC)\b/i)
      yield :ORDER, tcordertype(tok)
    elsif (tok = @ss.scan /NULL\b/i)
      yield :NULL, nil
    elsif (tok = @ss.scan /'(?:[^']|'')*'/) #'
      yield :STRING, tok.slice(1...-1).gsub(/''/, "'")
    elsif (tok = @ss.scan /-?(?:0|[1-9]\d*)(?:\.\d+)/)
      yield :NUMBER, tok.to_f
    elsif (tok = @ss.scan /-?(?:0|[1-9]\d*)/)
      yield :NUMBER, tok.to_i
    elsif (tok = @ss.scan /[,\(\)\*]/)
      yield tok, tok
    elsif (tok = @ss.scan /(?:[a-z_][\w]+\.)*ID\b/i)
      yield :ID, tok
    elsif (tok = @ss.scan /(?:[a-z_][\w]+\.)*[a-z_][\w]+/i)
      yield :IDENTIFIER, tok
    else
      raise Racc::ParseError, ('parse error on value "%s"' % @ss.rest.inspect)
    end
  end

  yield false, '$'
end
private :scan

def parse
  yyparse self, :scan
end

def tccond(op, expr)
  case op.upcase
  when '='
    expr.kind_of?(Numeric) ? :QCNUMEQ : :QCSTREQ
  when 'INC'
    :QCSTRINC
  when 'BW'
    :QCSTRBW
  when 'EW'
    :QCSTREW
  when 'INCALL'
    :QCSTRAND
  when 'INCANY'
    :QCSTROR
  when 'IN', 'EQANY'
    expr.all? {|i| i.kind_of?(Numeric) } ? :QCNUMOREQ : :QCSTROREQ
  when 'REGEXP'
    :QCSTRRX
  when '>'
    :QCNUMGT
  when '>='
    :QCNUMGE
  when '<'
    :QCNUMLT
  when '<='
    :QCNUMLE
  when 'BT', 'BETWEEN'
    :QCNUMBT
  when 'FTS'
    :QCFTSPH
  when 'FTSALL'
    :QCFTSAND
  when 'FTSANY'
    :QCFTSOR
  when 'FTSEX'
    :QCFTSEX
  else
    raise 'must not happen'
  end
end
private :tccond

def tcordertype(type)
  case type.upcase
  when 'ASC', 'STRASC'
    :QOSTRASC
  when 'DESC', 'STRDESC'
    :QOSTRDESC
  when 'NUMASC'
    :QONUMASC
  when 'NUMDESC'
    :QONUMDESC
  else
    raise 'must not happen'
  end
end
private :tcordertype

...end sqlparser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    73,    76,    34,    62,    63,    26,    10,    10,    34,    34,
    55,    64,    10,    64,    42,    80,    82,    84,    86,    68,
    70,    71,    74,    75,    77,    78,    79,    81,    83,    85,
    67,    69,    97,    10,     2,    10,    48,    64,    38,     8,
    95,   121,   117,    61,   116,    47,    47,    20,    59,    15,
    10,    87,    34,    10,     1,    57,    58,     3,    10,    10,
   115,   115,    27,   115,    10,    59,    10,    59,    32,    59,
    10,    59,    57,    58,    57,    58,    57,    58,    57,    58,
    59,    87,    59,    89,    89,    91,    92,    57,    58,    57,
    58,    28,    94,    27,    43,    96,    25,    24,   101,   102,
    10,    10,   105,    10,    21,   110,   111,    10,   110,    14,
    13,    12,   118,   120,    10,   101 ]

racc_action_check = [
    50,    50,    29,    47,    47,    17,    32,    26,    35,    36,
    39,    64,    42,    87,    29,    50,    50,    50,    50,    50,
    50,    50,    50,    50,    50,    50,    50,    50,    50,    50,
    50,    50,    72,    64,     0,    87,    34,    48,    28,     0,
    65,   114,   108,    44,   107,    34,    48,     8,    72,     8,
    25,    65,    23,    28,     0,    72,    72,     0,    34,    48,
   114,   108,    44,   107,     8,    43,    27,    97,    22,    94,
    21,   105,    43,    43,    97,    97,    94,    94,   105,   105,
    62,    51,   115,    53,    54,    55,    61,    62,    62,   115,
   115,    20,    63,    19,    31,    66,    16,    14,    88,    89,
    13,    91,    92,    12,    11,   100,   101,   102,   103,     4,
     3,     2,   110,   112,     1,    90 ]

racc_action_pointer = [
    32,    88,   108,   102,   109,   nil,   nil,   nil,    38,   nil,
   nil,    81,    77,    74,    97,   nil,    88,    -3,   nil,    69,
    87,    44,    64,    40,   nil,    24,   -19,    40,    27,   -10,
   nil,    80,   -20,   nil,    32,    -4,    -3,   nil,   nil,     5,
   nil,   nil,   -14,    45,    38,   nil,   nil,   -11,    33,   nil,
   -14,    65,   nil,    66,    67,    75,   nil,   nil,   nil,   nil,
   nil,    80,    60,    88,     7,    35,    90,   nil,   nil,   nil,
   nil,   nil,    28,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     9,    79,    81,
    96,    75,    98,   nil,    49,   nil,   nil,    47,   nil,   nil,
    84,    86,    81,    87,   nil,    51,   nil,    39,    37,   nil,
    92,   nil,    96,   nil,    36,    62,   nil,   nil,   nil,   nil,
   nil,   nil,   nil ]

racc_action_default = [
   -67,   -67,   -67,   -67,   -67,    -1,    -2,    -3,   -67,    -4,
   -40,   -67,   -67,   -67,   -67,   -12,   -67,   -67,   -41,   -13,
   -67,   -67,   -67,   -14,   123,   -67,   -67,   -67,   -67,   -14,
   -36,   -67,   -67,   -39,   -67,   -14,   -14,   -42,   -10,   -67,
   -11,   -35,   -67,   -67,   -67,   -21,   -23,   -67,   -67,   -15,
   -67,   -16,   -17,   -27,   -27,    -8,   -37,   -43,   -45,   -44,
   -38,   -67,   -67,   -67,   -67,   -67,   -67,   -64,   -52,   -65,
   -54,   -55,   -67,   -66,   -56,   -57,   -53,   -58,   -59,   -60,
   -48,   -61,   -49,   -62,   -50,   -63,   -51,   -67,   -31,   -67,
   -31,   -67,   -67,   -19,   -67,   -24,   -18,   -67,   -25,   -22,
   -33,   -67,   -67,   -33,    -9,   -67,   -46,   -67,   -67,    -6,
   -67,   -32,   -29,    -7,   -67,   -67,   -20,   -26,   -34,   -28,
   -30,    -5,   -47 ]

racc_goto_table = [
    11,    52,    30,    60,    19,   107,   109,    18,   108,   113,
    51,    22,    23,    88,    90,    66,   114,   100,     9,   103,
    31,     7,    93,    56,    35,    36,    37,    40,    44,    17,
    33,    18,    98,    39,    49,    16,    41,     6,     5,    99,
    72,    31,    53,    54,   119,    29,     4,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   122,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   104,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   112 ]

racc_goto_check = [
     6,    18,    25,    19,     7,     8,    13,     6,     8,    13,
    17,     6,     6,    11,    11,    18,     8,    12,     5,    12,
     6,     4,    19,    25,     6,     6,     6,     6,     7,    14,
    10,     6,    19,    15,    16,     9,    10,     3,     2,    20,
    22,     6,    10,    10,    23,    24,     1,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    19,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     6 ]

racc_goto_pointer = [
   nil,    46,    38,    37,    21,    18,    -1,    -4,   -89,    27,
     7,   -40,   -71,   -94,    21,     5,     0,   -24,   -33,   -40,
   -48,   nil,   -10,   -68,    24,   -19 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,    50,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    65,   nil,   106,
    45,    46,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  10, 48, :_reduce_5,
  8, 49, :_reduce_6,
  8, 49, :_reduce_7,
  4, 60, :_reduce_8,
  6, 60, :_reduce_9,
  1, 61, :_reduce_none,
  1, 61, :_reduce_none,
  1, 55, :_reduce_12,
  1, 55, :_reduce_none,
  0, 56, :_reduce_14,
  2, 56, :_reduce_15,
  2, 56, :_reduce_16,
  1, 62, :_reduce_none,
  3, 62, :_reduce_18,
  3, 64, :_reduce_19,
  5, 64, :_reduce_20,
  1, 63, :_reduce_21,
  3, 63, :_reduce_22,
  1, 66, :_reduce_none,
  3, 66, :_reduce_24,
  3, 67, :_reduce_25,
  5, 67, :_reduce_26,
  0, 57, :_reduce_27,
  4, 57, :_reduce_28,
  0, 69, :_reduce_29,
  1, 69, :_reduce_none,
  0, 58, :_reduce_31,
  2, 58, :_reduce_32,
  0, 59, :_reduce_33,
  2, 59, :_reduce_34,
  5, 50, :_reduce_35,
  1, 70, :_reduce_none,
  3, 70, :_reduce_37,
  3, 71, :_reduce_38,
  4, 51, :_reduce_39,
  1, 52, :_reduce_none,
  1, 53, :_reduce_41,
  3, 53, :_reduce_42,
  1, 65, :_reduce_none,
  1, 65, :_reduce_none,
  1, 65, :_reduce_none,
  1, 54, :_reduce_46,
  3, 54, :_reduce_47,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none ]

racc_reduce_n = 67

racc_shift_n = 123

racc_token_table = {
  false => 0,
  :error => 1,
  :INSERT => 2,
  :INTO => 3,
  "(" => 4,
  ")" => 5,
  :VALUES => 6,
  :SELECT => 7,
  :FROM => 8,
  :COUNT => 9,
  :AS => 10,
  "*" => 11,
  :WHERE => 12,
  :ID => 13,
  "=" => 14,
  :IN => 15,
  :AND => 16,
  :ORDER => 17,
  :BY => 18,
  :LIMIT => 19,
  :NUMBER => 20,
  :OFFSET => 21,
  :UPDATE => 22,
  :SET => 23,
  "," => 24,
  :DELETE => 25,
  :IDENTIFIER => 26,
  :STRING => 27,
  :NULL => 28,
  :BW => 29,
  :EW => 30,
  :INCALL => 31,
  :INCANY => 32,
  :INC => 33,
  :EQANY => 34,
  :REGEXP => 35,
  :BT => 36,
  :BETWEEN => 37,
  :FTS => 38,
  :FTSALL => 39,
  :FTSANY => 40,
  :FTSEX => 41,
  ">=" => 42,
  "<=" => 43,
  ">" => 44,
  "<" => 45 }

racc_nt_base = 46

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "INSERT",
  "INTO",
  "\"(\"",
  "\")\"",
  "VALUES",
  "SELECT",
  "FROM",
  "COUNT",
  "AS",
  "\"*\"",
  "WHERE",
  "ID",
  "\"=\"",
  "IN",
  "AND",
  "ORDER",
  "BY",
  "LIMIT",
  "NUMBER",
  "OFFSET",
  "UPDATE",
  "SET",
  "\",\"",
  "DELETE",
  "IDENTIFIER",
  "STRING",
  "NULL",
  "BW",
  "EW",
  "INCALL",
  "INCANY",
  "INC",
  "EQANY",
  "REGEXP",
  "BT",
  "BETWEEN",
  "FTS",
  "FTSALL",
  "FTSANY",
  "FTSEX",
  "\">=\"",
  "\"<=\"",
  "\">\"",
  "\"<\"",
  "$start",
  "sql",
  "create_statement",
  "read_statemant",
  "update_statemant",
  "delete_statemant",
  "id",
  "id_list",
  "value_list",
  "select_list",
  "where_clause",
  "order_by_clause",
  "limit_clause",
  "offset_clause",
  "count_clause",
  "count_arg",
  "id_search_condition",
  "search_condition",
  "id_predicate",
  "value",
  "boolean_primary",
  "predicate",
  "op",
  "ordering_spec",
  "set_clause_list",
  "set_clause" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

module_eval(<<'.,.,', 'sqlparser.y', 10)
  def _reduce_5(val, _values)
                                {:command => :insert, :table => val[2], :column_list => val[4], :value_list => val[8]}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 15)
  def _reduce_6(val, _values)
                                {:command => :select, :table => val[3], :select_list => val[1], :condition => val[4], :order => val[5], :limit => val[6], :offset => val[7]}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 19)
  def _reduce_7(val, _values)
                                {:command => :select, :table => val[3], :count => val[1], :condition => val[4]}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 24)
  def _reduce_8(val, _values)
                                "count_all"
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 28)
  def _reduce_9(val, _values)
                                val[5]
                          
  end
.,.,

# reduce 10 omitted

# reduce 11 omitted

module_eval(<<'.,.,', 'sqlparser.y', 36)
  def _reduce_12(val, _values)
                                []
                          
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'sqlparser.y', 42)
  def _reduce_14(val, _values)
                                []
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 46)
  def _reduce_15(val, _values)
                                val[1]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 50)
  def _reduce_16(val, _values)
                                val[1]
                          
  end
.,.,

# reduce 17 omitted

module_eval(<<'.,.,', 'sqlparser.y', 56)
  def _reduce_18(val, _values)
                                val[1]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 61)
  def _reduce_19(val, _values)
                                val[2]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 65)
  def _reduce_20(val, _values)
                                val[3]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 70)
  def _reduce_21(val, _values)
                                [val[0]].flatten
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 74)
  def _reduce_22(val, _values)
                                (val[0] << val[2]).flatten
                          
  end
.,.,

# reduce 23 omitted

module_eval(<<'.,.,', 'sqlparser.y', 80)
  def _reduce_24(val, _values)
                                val[1]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 85)
  def _reduce_25(val, _values)
                                {:name => val[0], :op => tccond(val[1], val[2]), :expr => val[2]}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 89)
  def _reduce_26(val, _values)
                                {:name => val[0], :op => tccond(val[1], val[3]), :expr => val[3]}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 93)
  def _reduce_27(val, _values)
                                nil
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 97)
  def _reduce_28(val, _values)
                                {:name => val[2], :type => val[3]}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 102)
  def _reduce_29(val, _values)
                                :QOSTRASC
                          
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'sqlparser.y', 108)
  def _reduce_31(val, _values)
                                nil
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 112)
  def _reduce_32(val, _values)
                                val[1]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 117)
  def _reduce_33(val, _values)
                                nil
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 121)
  def _reduce_34(val, _values)
                                val[1]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 126)
  def _reduce_35(val, _values)
                                {:command => :update, :table => val[1], :set_clause_list => val[3], :condition => val[4]}
                          
  end
.,.,

# reduce 36 omitted

module_eval(<<'.,.,', 'sqlparser.y', 132)
  def _reduce_37(val, _values)
                                val[0].merge val[2]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 137)
  def _reduce_38(val, _values)
                              {val[0] => val[2]}
                        
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 142)
  def _reduce_39(val, _values)
                                {:command => :delete, :table => val[2], :condition => val[3]}
                          
  end
.,.,

# reduce 40 omitted

module_eval(<<'.,.,', 'sqlparser.y', 149)
  def _reduce_41(val, _values)
                                [val[0]]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 153)
  def _reduce_42(val, _values)
                                val[0] << val[2]
                          
  end
.,.,

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

module_eval(<<'.,.,', 'sqlparser.y', 162)
  def _reduce_46(val, _values)
                                [val[0]]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 166)
  def _reduce_47(val, _values)
                                val[0] << val[2]
                          
  end
.,.,

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

def _reduce_none(val, _values)
  val[0]
end

end   # class SQLParser


end # module ActiveTokyoCabinet
